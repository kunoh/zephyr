#pragma once
#include <zephyr.h>
#include <logging/log.h>
#include <sys/printk.h>
#include <cstring>
#include <vector>
#include <pb_decode.h>
#include "proto/message.pb.h"
#include "message_encoder.h"


class Message{
public:
    MessageOuter msg_outer = MessageOuter_init_zero;

    bool InitializeMessageOuter(uint8_t* buffer, size_t message_length);
};

class MessageHandler {
public:
    virtual bool Handle(MessageBuffer &buffer, Message&) = 0;
};

{% for function in functions %}
class {{ function.name }}MessageHandler : public MessageHandler {
public:
    bool Handle(MessageBuffer &buffer, Message& msg);
private:
    void Handle{{ function.name }}(const {{ function.name }} &rv, MessageBuffer &buffer);
};
{% endfor %}

class MessageDispatcher {
public:
    void Init()
    {
        {% for function in functions -%}
        AddHandler({{ function.name }}_handler);
        {% endfor -%}
    }
    virtual void AddHandler(MessageHandler& h)
    {
        handlers_.push_back(&h);
    }
    virtual bool Handle(MessageBuffer &buffer, Message& msg)
    {
        for (auto h : handlers_) {
            if (h->Handle(buffer, msg)) {
                return true;
            }
        }
        return false;
    }
private:
    std::vector<MessageHandler*> handlers_;
    {% for function in functions -%}
    {{ function.name }}MessageHandler {{ function.name }}_handler;
    {% endfor -%}
};