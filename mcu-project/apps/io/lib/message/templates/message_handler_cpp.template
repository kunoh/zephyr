#include "message_handler.h"

LOG_MODULE_REGISTER(message_handler, LOG_LEVEL_INF);

bool Message::InitializeMessageOuter(uint8_t* buffer, size_t message_length) {
    bool status;

    pb_istream_t stream = pb_istream_from_buffer(buffer, message_length);

    status = pb_decode(&stream, MessageOuter_fields, &msg_outer);
    if (!status) {
        LOG_WRN("Decoding Outer failed: %s\n", PB_GET_ERROR(&stream));
    }
    return status;
}

bool DecodeInnerMessage(Message& msg, const pb_msgdesc_t *fields, void *dest_struct){
    bool status;

    pb_istream_t stream = pb_istream_from_buffer(msg.msg_outer.inner.value.bytes, msg.msg_outer.inner.value.size);

    status = pb_decode(&stream, fields, dest_struct);
    if (!status) {
        LOG_WRN("Decoding Inner failed: %s\n", PB_GET_ERROR(&stream));
        return false;
    }
    return true;
}
{% for function in functions %}
bool {{ function.name }}MessageHandler::Handle(MessageBuffer &buffer, Message& msg) {
    if (strcmp(msg.msg_outer.inner.type_url, "/{{ function.name }}") == 0) {
        {{ function.name }} rv = {{ function.name }}_init_zero;
        if (!DecodeInnerMessage(msg, {{ function.name }}_fields, &rv)){
            return false;
        }
        Handle{{ function.name }}(rv, buffer);
        return true;
    }
    return false;
}
{% endfor %}